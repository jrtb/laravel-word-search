# Conversation Prompt

You are assisting with a Laravel Word Search application. This application allows users to create, solve, and share word search puzzles, as well as track their longest discovered words, daily play streaks, and highest word counts per game.

Please consider the following context when providing assistance:

1. This is a Laravel-based web application using:
   - PHP ^8.2
   - Laravel Framework ^11.31
   - Node.js with Vite ^5.0
   - Tailwind CSS ^3.4.13
   - AWS S3 (via league/flysystem-aws-s3-v3 ^3.29)
   - Swagger/OpenAPI (via darkaonline/l5-swagger ^8.6)

2. Laravel 11 Specific Architecture:
   - No HTTP/Console Kernel.php files - all middleware and exception handling is in bootstrap/app.php
   - Simplified application bootstrapping using fluent configuration
   - Middleware groups configured using ->withMiddleware() in bootstrap/app.php
   - Route registration using ->withRouting() in bootstrap/app.php, which loads:
     - API routes from routes/api.php for better organization of versioned endpoints
     - Web routes from routes/web.php for web interface endpoints
   - Service providers registered using ->withProviders() for specific functionality
   - Simplified directory structure with removal of traditional bootstrap files

3. Key Features:
   - Word search puzzle functionality
   - Pattern-based word searching
   - Frequency-based word analysis
   - Play session management:
     - Get current session status and puzzle
     - Submit and validate words against puzzle
     - Track words found in current session
     - 24-hour session duration
     - Automatic session creation/renewal
   - Longest word tracking system:
     - Browser fingerprint-based player identification
     - Individual longest word records per player
     - Top 10 longest words leaderboard
   - Session and streak tracking:
     - Daily player session recording
     - Consecutive day streak tracking
     - Highest streak preservation
     - Independent from word submissions
   - Game word count tracking:
     - Records words found per game session
     - Tracks highest word count achieved
     - Player-specific records
     - Automatic record updates

4. Database Structure:
   - Uses migrations for schema management
   - Key tables include:
     - longest_words: Tracks player word submissions
       - session_id: Current session identifier
       - player_id: Unique player identifier (SHA-256 hash)
       - word: The submitted word
       - timestamps: Created/updated tracking
     - player_sessions: Tracks daily player activity
       - player_id: Unique player identifier
       - session_date: Date of the session
       - current_streak: Current consecutive days streak
       - highest_streak: Highest streak achieved
       - timestamps: Created/updated tracking
     - game_word_records: Tracks words found per game
       - player_id: Unique player identifier
       - word_count: Current game session count
       - highest_word_count: Highest count achieved
       - timestamps: Created/updated tracking

5. Player Identity System:
   - PlayerIdentityService handles player identification
   - Uses request fingerprinting to recognize returning players
   - Generates consistent SHA-256 hash from request attributes:
     - IP address
     - User agent
     - Accept-Language header
   - Maintains player identity across sessions
   - Supports both test and production environments
   - Follows Laravel's dependency injection patterns
   - Includes comprehensive test coverage
   - Handles edge cases like:
     - Browser changes
     - Session expiration
     - Multiple tabs/windows

6. Session Tracking System:
   - 24-hour session duration:
     - Sessions remain active for 24 hours from last activity
     - New sessions created after 24 hours of inactivity
     - Automatic session management
     - Session reuse within 24-hour window
   - Independent from word submissions
   - Records daily player activity
   - Maintains streak information:
     - Increments for consecutive days
     - Resets after missing a day
     - Preserves highest achieved streak
   - Handles multiple sessions per day
   - Provides streak statistics via API
   - Session data helps analyze engagement patterns

7. Testing:
   - Feature tests for all API endpoints
   - Dedicated fingerprint-based identity tests
   - Session handling and streak tracking tests
   - Database assertions
   - Test isolation and independence

8. The application uses Tailwind CSS for styling
9. Security and best practices should be maintained
10. Code should be clean, well-documented, and maintainable
11. The application is deployed in two environments:
    - Development: http://localhost:8000
    - Production: https://wordlists.fairladymedia.com
      - Hosted on AWS Lightsail
      - Uses Bitnami Laravel stack
      - Web server runs as 'daemon' user
      - Application root: /home/bitnami/stack/apache2/htdocs/laravel-word-search
      - Requires specific Bitnami-compatible file permissions

12. Security and Error Handling:
    - CSRF Protection:
      - All web routes protected by CSRF tokens
      - Token included in blade templates via meta tag
      - JavaScript requests include X-CSRF-TOKEN header
      - Enhanced error handling for token mismatches
    - Client-Side Error Handling:
      - Comprehensive error logging
      - User-friendly error messages
      - Loading states and indicators
      - Fallback content for failed requests
    - Server-Side Error Handling:
      - Detailed error responses
      - Proper status codes
      - Consistent error format
      - Environment-specific error detail levels

13. Database Management:
    - Development Environment:
      - Uses SQLite by default
      - Database file: database/database.sqlite
      - Data persistence considerations:
        - Database may be reset during development
        - Migrations may clear data (migrate:fresh, migrate:reset)
        - Test runs may clear data (RefreshDatabase trait)
    - Production Environment:
      - Uses MySQL/PostgreSQL
      - Data persistence is maintained
      - Only additive migrations are used
    - Player Data Handling:
      - Player identities persist across sessions via fingerprinting
      - Actual player data may be reset in development
      - Consider using seeders for consistent test data
      - Take backups before major database changes

When handling database operations:
- Be aware of commands that reset data (migrate:fresh, migrate:reset)
- Use appropriate migration strategies for development vs. production
- Consider data preservation needs when running tests
- Document database reset scenarios in code comments
- Implement proper error handling for database operations
- Use transactions for critical data operations
- Log significant database changes
- Consider session duration when querying historical data
- Handle session transitions gracefully
- Maintain data consistency across session changes

Before providing assistance:
1. Verify compatibility with Laravel 11's architecture and versions specified above
2. Review the README.md file to understand:
   - Application architecture
   - API endpoints and documentation
   - Installation and setup procedures
   - Current features and functionality
3. Consider existing test coverage and patterns in the test suite
4. Be aware of the environment context (development vs. production)

When suggesting changes or providing solutions:
- Ensure compatibility with Laravel 11's conventions and architecture
- Use Laravel 11's fluent configuration APIs where applicable
- Consider performance implications
- Maintain existing code style and patterns
- Include necessary tests when appropriate
- Consider user experience in frontend changes
- Ensure changes work in both development and production environments

After implementing changes:
1. Update relevant documentation:
   - README.md for new features or changes
   - API documentation (Swagger)
   - Postman collection and environments
2. Add or update tests:
   - Unit tests for new functionality
   - Feature tests for API endpoints
   - Update existing tests if behavior changes
3. Verify changes don't break existing functionality

For major changes:
- Provide a summary of all updates made
- List any new dependencies added
- Highlight any configuration changes needed
- Include any necessary migration steps
- Ensure changes align with Laravel 11's architectural patterns

When handling errors:
- Provide clear, user-friendly error messages
- Log detailed error information for debugging
- Maintain security by not exposing sensitive information
- Consider both development and production environments
- Follow Laravel 11's error handling patterns
- Implement proper loading states and fallbacks
